// 用于计算 e^x 的 Q8.8 固定点实现

//x=y⋅ln2+z
//e^x=2^y mul e^z
//e^z=1+z+z^2/2+z^3/6
 

module exp_Taylor_q88 (
    input  wire         rstn,
    input  wire         clk,
    input  wire [15:0]  x,     // Q8.8 format input x
    //input  wire [15:0]  b_num,  // if base is not e
    output reg  [15:0]  out_result,    // Q8.8 format output e^x
    output reg  err
);

    // Constant definitions
    // LN2 ≈ 0.693147, represented in Q8.8: round(0.693147*256) = 177 ≈ 0x00B1
    localparam [15:0] LN2 = 16'h00B1;
    localparam [15:0] Three = 16'h0300;
    // 1.0 的 Q8.8 表示
    localparam [15:0] ONE = 16'h0100;
    
    // ----------------------
    // Stage 0: Register input x and instantiate the division module to compute x/ln2
    // ----------------------

(* DONT_TOUCH = "TRUE" *) 
reg [15:0] x_reg;

always @(*) begin
   x_reg = x;
end

//calculate y
//y = floor(x/ln2)
wire [15:0] div_result;
wire        div_overflow;
reg  [15:0] y_reg = 0;


fxp_div_pipe #(
    .WIIA(8), .WIFA(8),
    .WIIB(8), .WIFB(8),
    .WOI(8),  .WOF(8),
    .ROUND(1)
) div_inst (
    .rstn(rstn),
    .clk(clk),
    .dividend(x_reg),
    .divisor(LN2),
    .out(div_result),
    .overflow(div_overflow)
);

always @(posedge clk or negedge rstn) begin
    if (!rstn ) begin
        y_reg <= 16'd0;
    end else begin
    if (div_overflow == 1) begin
        y_reg <= 16'd0;
        //err <= 1'd0;
    end else begin
        y_reg [15:8] <= div_result [15:8];
    end
end
end

//z=x-ln2y
//calculate ln2y

wire [15:0] ln2y_result;
wire        ln2y_overflow;
reg [15:0]  ln2y_reg;

fxp_mul_pipe #(
    .WIIA(8), .WIFA(8),
    .WIIB(8), .WIFB(8),
    .WOI(8),  .WOF(8),
    .ROUND(1)
) mul_inst (
    .rstn(rstn),
    .clk(clk),
    .ina(y_reg),
    .inb(LN2),
    .out(ln2y_result),
    .overflow(ln2y_overflow)
);

always @(posedge clk or negedge rstn) begin
    if (!rstn) begin
        ln2y_reg <= 16'd0;       
    end else begin
        ln2y_reg [15:8] <= ln2y_result;
    end
end
//calculate z
//z=x-ln2y
wire [15:0] z_result;
wire        z_overflow;
reg [15:0]  z_reg;
fxp_addsub #(
    .WIIA(8), .WIFA(8),
    .WIIB(8), .WIFB(8),
    .WOI(8),  .WOF(8),
    .ROUND(1)
) addsub_inst (
//    .rstn(rstn),
//    .clk(clk),
    .ina(x_reg),
    .inb(ln2y_reg),
    .sub(1),
    .out(z_result),
    .overflow(z_overflow)
);


always @(posedge clk or negedge rstn) begin
    if (!rstn ) begin
        z_reg <= 16'd0;
    end else begin
    if (z_overflow == 1) begin
        z_reg <= 16'd0;
        //err <= 1'd0;
    end else begin
        z_reg  <= z_result;
    end
end
end

//calculate z+1, z/2
reg [15:0] zd2_reg;
reg [15:0] zp1_reg;

always @(posedge clk or negedge rstn) begin
    if (!rstn ) begin
        zp1_reg <= 16'd0;
        zd2_reg <= 16'd0;
    end else begin
    if (z_reg [15]== 1) begin
        zp1_reg <= 16'd0;
        zd2_reg <= 16'd0;
        //err <= 1'd0;
    end else begin
        zp1_reg <= z_reg + ONE;
        zd2_reg <= (z_reg[0] == 1) ? (z_reg >> 1) + 1 : (z_reg >> 1);
    end
end
end

//caculate z/3
wire [15:0] zd3_result;
wire        zd3_overflow;
reg  [15:0] zd3_reg;
fxp_div_pipe #(
    .WIIA(8), .WIFA(8),
    .WIIB(8), .WIFB(8),
    .WOI(8),  .WOF(0),
    .ROUND(1)
) div_inst_z (
    .rstn(rstn),
    .clk(clk),
    .dividend(z_reg),
    .divisor(Three),
    .out(zd3_result),
    .overflow(zd3_overflow)
);

always @(posedge clk or negedge rstn) begin
    if (!rstn) begin
        zd3_reg <= 16'd0;       
    end else begin
        zd3_reg  <= zd3_result;
    end
end

//caculate z^2/2
wire [15:0] z2d2_result;
wire        z2d2_overflow;
reg  [15:0] z2d2_reg;

fxp_mul_pipe #(
    .WIIA(8), .WIFA(8),
    .WIIB(8), .WIFB(8),
    .WOI(8),  .WOF(8),
    .ROUND(1)
) mul_inst_z (
    .rstn(rstn),
    .clk(clk),
    .ina(z_reg),
    .inb(zd2_reg),
    .out(z2d2_result),
    .overflow(dsz2d2_overflow)
);

always @(posedge clk or negedge rstn) begin
if (!rstn) begin
    z2d2_reg    <= 16'd0;
end else begin
    z2d2_reg <= z2d2_result;
end
end

//caculate z^3/6
wire [15:0] z3d6_result;
wire        z3d6_overflow;
reg  [15:0] z3d6_reg;
 
fxp_mul_pipe #(
    .WIIA(8), .WIFA(8),
    .WIIB(8), .WIFB(8),
    .WOI(8),  .WOF(8),
    .ROUND(1)
) mul_inst_z3 (
    .rstn(rstn),
    .clk(clk),
    .ina(zd3_reg),
    .inb(z2d2_reg),
    .out(z3d6_result),
    .overflow(z3de_overflow)
);

always @(posedge clk or negedge rstn) begin
if (!rstn) begin
    z3d6_reg    <= 16'd0;
end else begin
    z3d6_reg <=z3d6_result;
end
end

always @(posedge clk or negedge rstn) begin
if (!rstn) begin
    z2d2_reg    <= 16'd0;
end else begin
    z2d2_reg <= z2d2_result;
end
end

reg [15:0] result;

always @(posedge clk or negedge rstn) begin
    if (!rstn) begin
        result <= 16'd0;  // 复位时清零
    end else begin
    if ((z_reg[15]|z2d2_reg[15]|z3d6_reg[15] ) ==1 )begin
        result <= 16'd0;  // 复位时清零
    end else begin
        result <= z3d6_reg + z2d2_reg + zp1_reg;  // 计算结果
    end
end
end

always @(posedge clk or negedge rstn) begin
    if (!rstn) begin
        out_result <= 16'd0;
    end else if (result[15] == 1) begin  // 检查溢出
        out_result <= 16'd0;
    end else begin
        out_result <= result;
    end
end

always @(posedge clk or negedge rstn) begin
    if (!rstn) begin
        err <= 1'd0;  // 复位时清零
    end else begin
    if (result[15]|z_reg [15]|z2d2_reg [15]|z3d6_reg[15] )
        err <= 1'd1;  // 计算结果
    end
end
endmodule
